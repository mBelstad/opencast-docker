# Copyright 2016 The University of Münster eLectures Team All rights reserved.
#
# Licensed under the Educational Community License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
#     http://opensource.org/licenses/ECL-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG IMAGE_BASE=default

FROM docker.io/library/eclipse-temurin:17-jdk AS base
LABEL org.opencontainers.image.base.name="docker.io/library/eclipse-temurin:17-jdk"

FROM base AS base-default-runtime
FROM base-default-runtime AS base-default-dev


FROM base-${IMAGE_BASE}-runtime AS base-runtime
FROM base-${IMAGE_BASE}-dev AS base-dev


FROM --platform=${BUILDPLATFORM} docker.io/library/alpine:edge AS build-ffmpeg
ARG TARGETARCH
ARG FFMPEG_VERSION="release"
RUN apk add --no-cache \
      curl \
      tar \
      xz \
 && mkdir -p /tmp/ffmpeg \
 && cd /tmp/ffmpeg \
 && curl -sSL "https://s3.opencast.org/opencast-ffmpeg-static/ffmpeg-${FFMPEG_VERSION}-${TARGETARCH}-static.tar.xz" \
     | tar xJf - --strip-components 1 --wildcards '*/ffmpeg' '*/ffprobe' \
 && chown root:root ff* \
 && mv ff* /usr/local/bin


FROM base-dev AS build-whisper-cpp
ARG WHISPER_CPP_VERSION="master"
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
      ccache \
      cmake \
      g++ \
      gcc \
      git \
      libc-dev \
      make
RUN mkdir -p /tmp/whisper.cpp
WORKDIR /tmp/whisper.cpp
RUN git clone https://github.com/ggerganov/whisper.cpp.git . \
 && git checkout "$WHISPER_CPP_VERSION"
RUN cmake -B build \
      -DBUILD_SHARED_LIBS=OFF \
      -DGGML_CPU=ON \
      -DGGML_CPU_ARM_ARCH=native \
      -DGGML_NATIVE=OFF \
      -DWHISPER_BUILD_EXAMPLES=ON \
      -DWHISPER_BUILD_SERVER=OFF \
      -DWHISPER_BUILD_TESTS=OFF \
 && cmake --build build --config Release -j $(nproc) \
 && sed -i 's#models_path=.*$#models_path=/usr/share/whisper.cpp/models/#' models/download-ggml-model.sh
RUN mkdir -p out \
 && mv build/bin/whisper-cli         out/whisper.cpp \
 && mv models/download-ggml-model.sh out/whisper.cpp-model-download


FROM base-dev

ARG OPENCAST_REPO="https://github.com/opencast/opencast.git"
ARG OPENCAST_VERSION="develop"
ARG VERSION=unkown
ARG BUILD_DATE=unkown
ARG GIT_COMMIT=unkown

LABEL maintainer="University of Münster eLectures Team <electures.dev@uni-muenster.de>" \
      org.opencontainers.image.title="opencast-build" \
      org.opencontainers.image.description="container image that provides an Opencast build and development environment" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.vendor="Opencast" \
      org.opencontainers.image.authors="University of Münster eLectures Team <electures.dev@uni-muenster.de>" \
      org.opencontainers.image.licenses="ECL-2.0" \
      org.opencontainers.image.url="https://github.com/opencast/opencast-docker/blob/${VERSION}/README.md" \
      org.opencontainers.image.documentation="https://github.com/opencast/opencast-docker/blob/${VERSION}/README.md" \
      org.opencontainers.image.source="https://github.com/opencast/opencast-docker" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${GIT_COMMIT}"

ENV OPENCAST_REPO                            "${OPENCAST_REPO}"
ENV OPENCAST_VERSION                         "${OPENCAST_VERSION}"
ENV OPENCAST_DISTRIBUTION                    "${OPENCAST_DISTRIBUTION}"
ENV OPENCAST_SRC                             "/usr/src/opencast"
ENV OPENCAST_HOME                            "/opencast"
ENV OPENCAST_DATA                            "/data"
ENV OPENCAST_CUSTOM_CONFIG                   "/etc/opencast"
ENV OPENCAST_USER                            "opencast"
ENV OPENCAST_GROUP                           "opencast"
ENV OPENCAST_UHOME                           "/home/opencast"
ENV OPENCAST_UID                             "800"
ENV OPENCAST_GID                             "800"
ENV OPENCAST_BUILD_ASSETS                    "/docker"
ENV WHISPER_CPP_MODELS                       "/usr/share/whisper.cpp/models"
ENV OPENCAST_CONFIG                          "${OPENCAST_HOME}/etc"
ENV OPENCAST_SCRIPTS                         "${OPENCAST_HOME}/docker/scripts"
ENV OPENCAST_STAGE_BASE_HOME                 "${OPENCAST_HOME}/docker/stage/base"
ENV OPENCAST_STAGE_OUT_HOME                  "${OPENCAST_HOME}/docker/stage/out"
ENV ORG_OPENCASTPROJECT_SECURITY_ADMIN_USER  "admin"
ENV ORG_OPENCASTPROJECT_SECURITY_ADMIN_PASS  "opencast"
ENV ORG_OPENCASTPROJECT_SECURITY_DIGEST_USER "opencast_system_account"
ENV ORG_OPENCASTPROJECT_SECURITY_DIGEST_PASS "CHANGE_ME"

# Install Firefox from PPA
COPY <<EOF /etc/apt/preferences.d/mozillateam
Package: *
Pin: release o=LP-PPA-mozillateam
Pin-Priority: 100

Package: firefox*
Pin: release o=LP-PPA-mozillateam
Pin-Priority: 1001

Package: firefox*
Pin: release o=Ubuntu
Pin-Priority: -1
EOF

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
      gnupg \
      software-properties-common \
 && add-apt-repository -y ppa:mozillateam/ppa \
 && apt-get update \
 && apt-get install -y --no-install-recommends \
      bzip2 \
      ca-certificates \
      firefox \
      g++ \
      gcc \
      git \
      gzip \
      libc-dev \
      make \
      openssl \
      sudo \
      tar \
      xz-utils \
 && apt-get install -y --no-install-recommends \
      ca-certificates \
      curl \
      fontconfig \
      fonts-dejavu \
      fonts-freefont-ttf \
      fonts-liberation \
      fonts-linuxlibertine \
      gosu \
      inotify-tools \
      jq \
      netcat-openbsd \
      openssl \
      rsync \
      tesseract-ocr \
      tesseract-ocr-eng \
      tzdata \
  \
 && sudo ln -s /usr/local/openjdk*/bin/* /usr/local/bin/ \
  \
 && groupadd --system -g "${OPENCAST_GID}" "${OPENCAST_GROUP}" \
 && useradd --system -M -N -g "${OPENCAST_GROUP}" -d "${OPENCAST_UHOME}" -u "${OPENCAST_UID}" "${OPENCAST_USER}" \
 && mkdir -p "${OPENCAST_SRC}" "${OPENCAST_HOME}" "${OPENCAST_UHOME}" "${OPENCAST_DATA}" "${OPENCAST_BUILD_ASSETS}" "${WHISPER_CPP_MODELS}" \
 && chown -R "${OPENCAST_USER}:${OPENCAST_GROUP}" "${OPENCAST_HOME}" "${OPENCAST_UHOME}" "${OPENCAST_DATA}" "${WHISPER_CPP_MODELS}" \
 && echo "opencast-builder ALL = NOPASSWD: ALL" > /etc/sudoers.d/opencast-builder \
  \
 && cd / \
 && rm -rf /tmp/* /var/lib/apt/lists/*

COPY --from=build-ffmpeg       /usr/local/bin/ff*      /usr/local/bin/
COPY --from=build-whisper-cpp  /tmp/whisper.cpp/out/*  /usr/local/bin/
COPY rootfs       "${OPENCAST_BUILD_ASSETS}/"
COPY rootfs-build /

WORKDIR "${OPENCAST_SRC}"

EXPOSE 8080 5005
VOLUME [ "${OPENCAST_DATA}", "${OPENCAST_SRC}", "/root/.m2" ]

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["bash"]
